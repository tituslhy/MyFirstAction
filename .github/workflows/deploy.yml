name: Deployment

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Cache and Install Dependencies
        id: cache-deps
        uses: ./.github/actions/cached-deps
        with:
          caching: "true"
      - name: Output information
        run: echo "Cache setting - ${{ steps.cache-deps.outputs.used-cache}}"
      - name: Install black
        run: |
          python -m pip install --upgrade pip  
          pip install black
      - name: Lint Code
        run: black .
      - name: Upload linted code as artifact
        uses: actions/upload-artifact@v4
        with:
          name: linted-code
          path: .

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Cache and Install Dependencies
        id: cache-deps
        uses: ./.github/actions/cached-deps
        with:
          caching: "true"
      - name: Output information
        run: echo "Cache setting - ${{ steps.cache-deps.outputs.used-cache}}"
      - name: Run Tests
        run: |
          pytest tests --cov=tests --cov-report=xml:coverage.xml --cov-report=html:coverage-report.html
      - name: List files for debugging
        run: |
          ls -la  
          ls -la tests  
          ls -la coverage-report.html  
          ls -la coverage.xml
      - name: Upload Test Results as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            tests/test_results.xml  
            coverage.xml
      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report.html

  codescan:
    needs: test
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["python"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #     echo "Run, Build Application using script"
      #     ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Download linted code artifact
        uses: actions/download-artifact@v4
        with:
          name: linted-code
      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/myfirstaction
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master  
            network=host
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
